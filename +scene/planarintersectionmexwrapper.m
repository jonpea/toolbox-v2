function hits = planarintersectionmexwrapper( ...
    faceorigins, facenormals, offsettolocal, ...
    rayorigins, raydirections, tnear, tfar, buffer)

narginchk(7, 8)

% Preconditions
assert(ismatrix(faceorigins))
assert(ismatrix(facenormals))
assert(ndebug || isequal(size(faceorigins), size(facenormals)))
assert(isnumeric(offsettolocal))
assert(size(offsettolocal, 3) == size(faceorigins, 2) - 1)
assert(ismatrix(rayorigins))
assert(ismatrix(raydirections))
assert(size(rayorigins, 2) == size(faceorigins, 2))
assert(ndebug || isequal(size(rayorigins), size(raydirections)))
assert(isnumeric(tnear))
assert(isnumeric(tfar))

numdimensions = size(faceorigins, 2);

if numdimensions == 2
    faceorigins(:, 3) = 0;
    facenormals(:, 3) = 0;
    offsettolocal(:, 3, 1) = 0;
    offsettolocal(:, 3, 2) = 0;
    rayorigins(:, 3) = 0;
    raydirections(:, 3) = 0;
end

numhits = planarintersectionmex( ...
    ... % Inputs
    faceorigins', ...
    facenormals', ...
    permute(offsettolocal, [2 3 1]), ...
    rayorigins', ...
    raydirections', ...
    tnear', ...
    tfar', ...
    ... % Outputs
    buffer.FaceIndex, ...
    buffer.RayIndex, ...
    buffer.RayParameter, ...
    buffer.Point, ...
    buffer.FaceCoordinates);

extract = @(a) a(:, 1 : numhits)';

hits = struct( ...
    'RayIndex', extract(buffer.RayIndex) + 1, ...
    'FaceIndex', extract(buffer.FaceIndex) + 1, ...
    'RayParameter', extract(buffer.RayParameter), ...
    'Point', extract(buffer.Point), ...
    'FaceCoordinates', extract(buffer.FaceCoordinates));


[~, permutation] = sortrows([hits.RayIndex, hits.FaceIndex]);
hits = tabularrows(hits, permutation);
